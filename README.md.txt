Приложение имеет 3 фрагмента, представляющие 3 экрана для пользовательского взаимодействия:
1) Экран выбора специальности и по совместительству домашний экран  приложения.
2) Экран для выбора работника по соответствующей специальности.
3) Последний экран представляет карту работника.

Приложение построено по паттерну MVVM, в соответствии с рекомендацией официальной документации.

Model - представляет из себя базу данных SQLite построенную с помощью библиотеки Room.
При создании базы данных приложение получает данные по сети используя библиотеку Retrofit и 
получает ответ от апи в класс Response, являющийся POJO классом для ответа апи, далее в данные из POJO класса 
используются для создания объектов более подходящих для хранения в реляционной БД. 
Сама база данных представляет из себя 3 таблицы: Рабочие, Специальности и таблица отношений рабочего к специальности. 
В соответствии с архитектурой базы данных, ответ от апи разбивается на нужные для БД сущности и попутно изменяются не подходящие 
для хранения и использования в будущем значения.

Также частью Model являются Dao и Repository, нужные для общения с БД. Dao содержит в себе все методы для общения с базой данных, а Repository
методы для получения данных от Dao.

ViewModel состоит из 3х ViewModel, для каждого фрагмента соответственно.

В приложении также реализован паттерн Dependency Injection с помощью обертки над библиотекой Dagger - Hilt

Данные из ViewModel содержащие в себе LiveData объекты передаются во фрагменты и "наблюдаются" соответствующими View компонентами.

Также для навигации по фрагментам и передачи данных между ними была использована библиотека Navigation, 
с помощью навигационного графа были заданы все действия и данные передаваемые от фрагмента к фрагменту.

Для отображения аватаров была выбрана библиотека Picasso, предназначенная для получений изображений по сети о отображения их в соответствующих ImageView. 
